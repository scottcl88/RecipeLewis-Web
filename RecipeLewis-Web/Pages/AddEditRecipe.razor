@page "/recipe/edit"
@using RecipeLewis.Models
@using RecipeLewis.Models.Requests
@using Models.Results
@using AutoMapper
@using System.Net.Http.Headers
@attribute [CustomAuthorizeAttribute(Role.Editor, Role.Admin)]
@inject IHttpService HttpService
@inject IRecipeService RecipeService
@inject IDocumentService DocumentService
@inject IAuthenticationService AuthenticationService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IMapper Mapper
@inject IDialogService DialogService

<PageTitle>@(recipeId <= 0 ? "Add" : "Edit") Recipe</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="12" lg="10">
        <MudPaper Class="pa-4">
            <MudItem xs="12" sm="12" md="12" lg="12" hidden="@(!loading)">
                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            </MudItem>
            <MudForm @ref="form" @bind-IsValid="@isValid" hidden="@(loading)">
                <MudGrid>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudTextField T="string" Label="Title" Immediate="true" @bind-Value="@model.Title" Required="true" RequiredError="Title is required!" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudTextField T="string" Label="Author" Immediate="true" @bind-Value="@model.Author" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudSelect T="CategoryModel" @bind-Value="@model.Category" Label="Category" Immediate="true" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var category in categories)
                            {
                                <MudSelectItem Value="@category"></MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudTextField T="string" Label="Yield" @bind-Value="@model.Yield" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudInputLabel Class="bold">Tags</MudInputLabel>
                        <MudChipSet AllClosable="true" OnClose="RemoveTag">
                            @foreach (var value in model.Tags)
                            {
                                <MudChip Text="@value.Name"></MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudTextField T="string" Label="New Tag" Immediate="true" OnKeyPress="OnTagKeyPress" Clearable="true" @ref="tagReference" />
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddTag" Color="Color.Secondary" Style="margin-top: 15px;">Add</MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudTextField T="string" Label="Description" Immediate="true" @bind-Value="@model.Description" Lines="3" />
                        <MudTextField T="string" Label="Storage" Immediate="true" @bind-Value="@model.Storage" Lines="3" />
                        <MudTextField T="string" Label="Nutrition" Immediate="true" @bind-Value="@model.Nutrition" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" lg="4">
                        <MudInputLabel Class="bold">Prep Time</MudInputLabel>
                        <MudGrid>
                            <MudItem xs="6" sm="6" md="6" lg="4">
                                <MudNumericField @bind-Value="@prepTimeHours" Label="Hours" Immediate="true" Variant="Variant.Text" Min="0" Max="99" />
                            </MudItem>
                            <MudItem xs="6" sm="6" md="6" lg="4">
                                <MudNumericField @bind-Value="@prepTimeMinutes" Label="Minutes" Immediate="true" Variant="Variant.Text" Min="0" Max="59" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" lg="4">
                        <MudInputLabel Class="bold">Cook Time</MudInputLabel>
                        <MudGrid>
                            <MudItem xs="6" sm="6" md="6" lg="4">
                                <MudNumericField @bind-Value="@cookTimeHours" Label="Hours" Immediate="true" Variant="Variant.Text" Min="0" Max="99" />
                            </MudItem>
                            <MudItem xs="6" sm="6" md="6" lg="4">
                                <MudNumericField @bind-Value="@cookTimeMinutes" Label="Minutes" Immediate="true" Variant="Variant.Text" Min="0" Max="59" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" lg="4">
                        <MudInputLabel Class="bold">Total Time</MudInputLabel>
                        <MudGrid>
                            <MudItem xs="6" sm="6" md="6" lg="4">
                                <MudNumericField @bind-Value="@totalTimeHours" Label="Hours" Immediate="true" Variant="Variant.Text" Min="0" Max="99" />
                            </MudItem>
                            <MudItem xs="6" sm="6" md="6" lg="4">
                                <MudNumericField @bind-Value="@totalTimeMinutes" Label="Minutes" Immediate="true" Variant="Variant.Text" Min="0" Max="59" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12" class="ma-auto">
                        <label class="mud-input-label">Ingredients</label>
                        <div id="ingredientsToolbar">
                            <span class="ql-formats">
                                <select class="ql-font">
                                    <option selected=""></option>
                                    <option value="serif"></option>
                                    <option value="monospace"></option>
                                </select>
                                <select class="ql-size">
                                    <option value="small"></option>
                                    <option selected=""></option>
                                    <option value="large"></option>
                                    <option value="huge"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                    <option value="justify"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </div>
                        <div @ref="@divIngredientsEditorElement" />

                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12" class="ma-auto">
                        <label class="mud-input-label">Directions</label>
                        <div id="directionsToolbar">
                            <span class="ql-formats">
                                <select class="ql-font">
                                    <option selected=""></option>
                                    <option value="serif"></option>
                                    <option value="monospace"></option>
                                </select>
                                <select class="ql-size">
                                    <option value="small"></option>
                                    <option selected=""></option>
                                    <option value="large"></option>
                                    <option value="huge"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                    <option value="justify"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </div>
                        <div @ref="@divDirectionsEditorElement" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Outlined="true" Class="@DragClass">
                            @if (!clearing)
                            {
                                <InputFile OnChange="OnInputFileChanged" multiple class="absolute mud-width-full mud-height-full overflow-hidden z-2" accept=".jpg, .jpeg, .png" style="opacity:0;" />
                            }
                            <MudText Typo="Typo.subtitle2">Drag and drop images or click here</MudText>
                            @foreach (var file in documents)
                            {
                                <MudItem xs="12" sm="12" md="12" lg="3">
                                    <MudBadge Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" Overlap="true" Bordered="true" Class="mx-6 my-4 pointer" OnClick="() => RemoveFileFromBadge(file.DocumentId)">
                                        <MudImage Src="@(file.NotUploaded ? file.ImgSrc : $"{apiBaseAddress}documents/view/{recipeId}/{file.DocumentId}")" ObjectFit="ObjectFit.Contain" Fluid="true" Alt="@file.Name" Elevation="25" Class="rounded-lg" />

                                    </MudBadge>
                                </MudItem>
                            }
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12" md="2" lg="2">
        <MudPaper Class="pa-4 position-fixed-lg" Style="">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudButton Disabled="@(loading || !isValid)" OnClick="HandleSubmit" Variant="Variant.Filled" Color="Color.Primary">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Working...</MudText>
                        }
                        else
                        {
                            <MudText>Save</MudText>
                        }
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12" hidden="@(recipeId <= 0)">
                    <MudButton Disabled="@loading" OnClick="HandleDelete" Variant="Variant.Filled" Color="Color.Error">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Working...</MudText>
                        }
                        else
                        {
                            <MudText>Delete</MudText>
                        }
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12" hidden="@(recipeId <= 0)">
                    <MudButton Disabled="@loading" OnClick="HandleCancel" Variant="Variant.Filled" Color="Color.Tertiary">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Working...</MudText>
                        }
                        else
                        {
                            <MudText>Cancel</MudText>
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool isValid;
    private MudForm? form;
    private CreateRecipeRequest model = new CreateRecipeRequest();
    private string error;
    private bool showError;
    private bool loading = true;
    private string strSavedContent = "";
    private ElementReference divIngredientsEditorElement;
    private ElementReference divDirectionsEditorElement;
    private string EditorContent;
    private string EditorHTMLContent;
    private bool EditorEnabled = true;
    List<string> tags = new List<string>();
    List<CategoryModel> categories = new List<CategoryModel>();
    List<DocumentModel> documents = new List<DocumentModel>();
    List<DocumentModel> documentsToDelete = new List<DocumentModel>();
    private MudTextField<string>? tagReference;
    private bool clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();
    private int recipeId;
    private long maxFileSize = 26214400;
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 3;
    private bool upload = false;
    private MultipartFormDataContent content = new MultipartFormDataContent();
    private string apiBaseAddress;

    private int prepTimeHours;
    private int prepTimeMinutes;
    private int cookTimeHours;
    private int cookTimeMinutes;
    private int totalTimeHours;
    private int totalTimeMinutes;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        if (loading || clearing) return;
        ClearDragClass();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                var documentModel = new DocumentModel()
                    {
                        FileName = file.Name,
                        ContentType = file.ContentType,
                        ByteSize = file.Size,
                        CreatedBy = AuthenticationService.User,
                        NotUploaded = true
                    };
                try
                {
                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxAllowedSize: maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    using (var ms = file.OpenReadStream(maxAllowedSize: maxFileSize))
                    {
                        using (var ms2 = new MemoryStream())
                        {
                            await ms.CopyToAsync(ms2);
                            var fileBytes = ms2.ToArray();
                            documentModel.ImgSrc = "data:image/jpg;base64," + Convert.ToBase64String(fileBytes);
                        }
                    }

                    documents.Add(documentModel);
                    fileNames.Add(file.Name);                    
                    upload = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(
                        "{0} not uploaded (Err: 6): {1}",
                        file.Name, ex.Message);
                }
            }
        }
    }

    private async Task Clear()
    {
        clearing = true;
        fileNames.Clear();
        documentsToDelete.AddRange(documents.Where(x => !x.NotUploaded));
        documents.Clear();
        ClearDragClass();
        await Task.Delay(100);
        clearing = false;
        upload = false;
        content.Dispose();
        content = new MultipartFormDataContent();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
    public void RemoveFile(MudChip chip)
    {
        fileNames.RemoveAll(x => x == chip.Text);
        documentsToDelete.AddRange(documents.Where(x => x.FileName == chip.Text && !x.NotUploaded));
        documents.RemoveAll(x => x.FileName == chip.Text);
    }
    public void RemoveFileFromBadge(int documentId)
    {
        documentsToDelete.AddRange(documents.Where(x => x.DocumentId == documentId && !x.NotUploaded));
        documents.RemoveAll(x => x.DocumentId == documentId);
    }

    public void AddTag()
    {
        model.Tags.Add(new TagModel(tagReference.Text));
        tagReference.Clear();
        StateHasChanged();
    }
    public void RemoveTag(MudChip chip)
    {
        model.Tags.RemoveAll(x => x.Name == chip.Text);
    }
    public void OnTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddTag();
        }
    }
    private async void HandleSubmit()
    {
        loading = true;
        try
        {
            model.PrepTime = new TimeSpan(prepTimeHours, prepTimeMinutes, 0);
            model.CookTime = new TimeSpan(cookTimeHours, cookTimeMinutes, 0);
            model.TotalTime = new TimeSpan(totalTimeHours, totalTimeMinutes, 0);

            model.IngredientsHTML = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillHTML", divIngredientsEditorElement);
            model.DirectionsHTML = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillHTML", divDirectionsEditorElement);

            model.Ingredients = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillContent", divIngredientsEditorElement);
            model.Directions = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillContent", divDirectionsEditorElement);
            showError = false;
            RecipeModel result = null;
            bool isNew = false;
            if (recipeId <= 0)
            {
                result = await RecipeService.Create(model);
                recipeId = result.RecipeId;
                isNew = true;
            }
            else
            {
                var updateRequest = Mapper.Map<UpdateRecipeRequest>(model);
                updateRequest.Id = new RecipeId(recipeId);
                updateRequest.DocumentsToDelete = documentsToDelete;
                result = await RecipeService.Update(updateRequest);
            }
            if (upload)
            {
                var response = await DocumentService.Upload(content, recipeId);

                if (response != null)
                {
                    uploadResults = uploadResults.Concat(response).ToList();
                }
            }
            if (result == null)
            {
                Snackbar.Add("An error occured!", Severity.Error, config => { config.ShowCloseIcon = true; });
            }
            else
            {
                if (isNew)
                {
                    Snackbar.Add("Successfully added recipe!", Severity.Success, config => { config.ShowCloseIcon = true; });
                }
                else
                {
                    Snackbar.Add("Successfully saved recipe!", Severity.Success, config => { config.ShowCloseIcon = true; });
                }
                NavigationManager.NavigateTo("/recipes");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            showError = true;
            loading = false;
            Snackbar.Add("An error occured!", Severity.Error, config => { config.ShowCloseIcon = true; });
            Console.WriteLine("Error: {0}", ex.Message);
            StateHasChanged();
        }
    }
    private async void HandleCancel()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to cancel your changes?");
        parameters.Add("YesText", "Yes");
        parameters.Add("NoText", "No");
        parameters.Add("Color", Color.Tertiary);
        parameters.Add("TitleText", "Cancel Changes");
        parameters.Add("TitleIcon", Icons.Material.Filled.Cancel);

        var dialog = DialogService.Show<ConfirmDialog>("Cancel Changes", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            NavigationManager.NavigateTo("/recipes");
        }
    }
    private async void HandleDelete()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this recipe?");
        parameters.Add("YesText", "Delete");
        parameters.Add("NoText", "Cancel");
        parameters.Add("Color", Color.Error);
        parameters.Add("TitleText", "Delete Recipe");
        parameters.Add("TitleIcon", Icons.Material.Filled.DeleteForever);

        var dialog = DialogService.Show<ConfirmDialog>("Delete Recipe", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            DoDelete();
        }
    }
    private async void DoDelete()
    {
        loading = true;
        try
        {
            var result = await RecipeService.Delete(recipeId);
            if (result == null)
            {
                Snackbar.Add("An error occured!", Severity.Error, config => { config.ShowCloseIcon = true; });
            }
            else
            {
                Snackbar.Add("Successfully deleted recipe!", Severity.Success, config => { config.ShowCloseIcon = true; });
                NavigationManager.NavigateTo("/recipes");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            showError = true;
            loading = false;
            Snackbar.Add("An error occured!", Severity.Error, config => { config.ShowCloseIcon = true; });
            Console.WriteLine("Error: {0}", ex.Message);
            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loading = true;
            if (recipeId > 0)
            {
                var recipeModel = await RecipeService.GetRecipe(recipeId);
                documents = recipeModel.Documents;
                model = Mapper.Map<CreateRecipeRequest>(recipeModel);
            }
            categories = await RecipeService.GetCategories();
            if (recipeId <= 0)
            {
                model.Category = categories?.FirstOrDefault();
            }

            if (model.PrepTime.HasValue)
            {
                prepTimeHours = model.PrepTime.Value.Hours;
                prepTimeMinutes = model.PrepTime.Value.Minutes;
            }
            if (model.CookTime.HasValue)
            {
                cookTimeHours = model.CookTime.Value.Hours;
                cookTimeMinutes = model.CookTime.Value.Minutes;
            }
            if (model.TotalTime.HasValue)
            {
                totalTimeHours = model.TotalTime.Value.Hours;
                totalTimeMinutes = model.TotalTime.Value.Minutes;
            }

            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divIngredientsEditorElement, "#ingredientsToolbar", "Ingredients");
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divDirectionsEditorElement, "#directionsToolbar", "Directions");

            var quillDelta = await JSRuntime.InvokeAsync<object>(
                "QuillFunctions.loadQuillContent", divIngredientsEditorElement, model.Ingredients);
            var quillDelta2 = await JSRuntime.InvokeAsync<object>(
                "QuillFunctions.loadQuillContent", divDirectionsEditorElement, model.Directions);
            loading = false;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        apiBaseAddress = HttpService.GetBaseAddress();
        bool result = Int32.TryParse(NavigationManager.QueryString("recipeId"), out recipeId);
    }
}