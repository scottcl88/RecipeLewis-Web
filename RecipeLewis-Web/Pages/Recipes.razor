@page "/"
@page "/recipes"
@using RecipeLewis.Models
@inject IRecipeService RecipeService
@inject IAuthenticationService AuthenticationService

<PageTitle>Recipes</PageTitle>

<div hidden="@(!canEdit)">
    <MudButton Href="/recipe/edit" Class="ml-auto mb-2" Variant="Variant.Filled" Color="Color.Primary">Add Recipe</MudButton>
</div>

<MudTable Items="@recipes" Hover="true" Filter="new Func<RecipeModel,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Loading="@loading" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Recipes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Tags</MudTh>
        <MudTh>...</MudTh>
        <MudTh>...</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Title</MudTd>
        <MudTd DataLabel="Nr">@context.Author</MudTd>
        <MudTd DataLabel="Nr">@context.Category?.Name</MudTd>
        <MudTd DataLabel="Nr">
            <MudChipSet>
                @foreach (var value in context.Tags)
                {
                    <MudChip Text="@value.Name"></MudChip>
                }
            </MudChipSet>
        </MudTd>
        <MudTd DataLabel="Nr">
            <MudButton Href=@("/recipe/view?recipeId="+context.RecipeId)>View</MudButton>
        </MudTd>
        <MudTd DataLabel="Nr">
            @if (canEdit)
            {
                <MudButton Href=@("/recipe/edit?recipeId="+context.RecipeId) Disabled="@(!canEdit)">Edit</MudButton>
            }
            else
            {
                <MudTooltip Text="Go to your Profile to request access to edit" Color="Color.Primary" Placement="Placement.Top">
                    <MudButton Href=@("/recipe/edit?recipeId="+context.RecipeId) Disabled="@(!canEdit)">Edit</MudButton>
                </MudTooltip>
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private bool loading = true;
    private List<RecipeModel> recipes = new();
    private RecipeModel selectedItem1;
    private string searchString1 = "";
    private HashSet<RecipeModel> selectedItems = new();
    private UserModel user;
    private bool canEdit = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loading = true;
            recipes = await RecipeService.GetRecipes();
            user = AuthenticationService.User;
            canEdit = user?.Role is not null and (Role.Editor or Role.Admin);
            loading = false;
            StateHasChanged();
        }
    }
    private bool FilterFunc1(RecipeModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(RecipeModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element?.Title?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;
        if (element?.Author?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;
        if (element?.Category?.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;
        if (element?.Tags.Any(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        return false;
    }
}