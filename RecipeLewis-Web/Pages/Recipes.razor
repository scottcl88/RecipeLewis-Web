@page "/"
@page "/recipes"
@using RecipeLewis.Models
@attribute [Authorize]
@inject IRecipeService RecipeService

<PageTitle>Recipes</PageTitle>

<MudButton Href="/recipe/edit" Class="ml-auto" Variant="Variant.Filled" Color="Color.Primary">Add Recipe</MudButton>
<MudTable Items="@recipes" Hover="true" Filter="new Func<RecipeModel,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Recipes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>...</MudTh>
        <MudTh>...</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Title</MudTd>
        <MudTd DataLabel="Nr">@context.Category?.Name</MudTd>
        <MudTd>
            <MudButton Href=@("/recipe/view?recipeId="+context.RecipeId) >View</MudButton>
        </MudTd>
        <MudTd>
            <MudButton Href=@("/recipe/edit?recipeId="+context.RecipeId) >Edit</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private bool loading;
    private List<RecipeModel> recipes;
    private RecipeModel selectedItem1 = null;
    private string searchString1 = "";
    private HashSet<RecipeModel> selectedItems = new HashSet<RecipeModel>();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        recipes = await RecipeService.GetRecipes();
        loading = false;
    }

    private bool FilterFunc1(RecipeModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(RecipeModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element?.Title?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;
        if (element?.Category?.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;
        return false;
    }
}