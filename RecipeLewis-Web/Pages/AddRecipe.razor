@page "/add-recipe"
@using RecipeLewis.Models
@using RecipeLewis.Models.Requests
@attribute [Authorize]
@inject IRecipeService RecipeService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Add Recipe</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudTextField T="string" Label="Title" @bind-value="model.Title" Required="true" RequiredError="Title is required!" />
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Disabled="@(loading || !isValid)" OnClick="HandleSubmit" Class="ml-auto" Variant="Variant.Filled" Color="Color.Primary">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Working...</MudText>
                        }
                        else
                        {
                            <MudText>Add</MudText>
                        }
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <div hidden="@(!showError)">
            <MudAlert Severity="Severity.Error">An error occurred.</MudAlert>
        </div>
    </MudItem>
</MudGrid>


@code {
    private bool isValid;
    private MudForm form;
    private CreateRecipeRequest model = new CreateRecipeRequest();
    private string error;
    private bool showError;
    private bool loading;

    private async void HandleSubmit()
    {
        loading = true;
        try
        {
            showError = false;
            var result = await RecipeService.Create(model);
            if(result == null)
            {
                Snackbar.Add("An error occured!", Severity.Error, config => { config.ShowCloseIcon = true; });
            }
            else
            {
                Snackbar.Add("Successfully added recipe!", Severity.Success, config => { config.ShowCloseIcon = true; });
                NavigationManager.NavigateTo("/recipes");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            showError = true;
            loading = false;
            StateHasChanged();
        }
    }
}