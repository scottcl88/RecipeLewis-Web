@page "/add-recipe"
@using RecipeLewis.Models
@using RecipeLewis.Models.Requests
@attribute [Authorize]
@inject IRecipeService RecipeService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Add Recipe</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="12" lg="12">
        <MudPaper Class="pa-4 mt-2">
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudTextField T="string" Label="Title" @bind-value="model.Title" Required="true" RequiredError="Title is required!" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudTextField T="string" Label="Author" @bind-value="model.Author" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudSelect T="CategoryModel" @bind-Value="model.Category" Label="Category" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var category in categories)
                            {
                                <MudSelectItem Value="@category"></MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudTextField T="string" Label="Yield" @bind-value="model.Yield" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <label class="mud-input-label">Tags</label>
                        <MudChipSet AllClosable="true" OnClose="RemoveTag">
                            @foreach (var value in model.Tags)
                            {
                                <MudChip Text="@value.Name"></MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudTextField T="string" Label="New Tag" Immediate="true" OnKeyPress="OnTagKeyPress" Clearable="true" @ref="tagReference"/>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddTag" Color="Color.Secondary" Style="margin-top: 15px;">Add</MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudTextField T="string" Label="Description" @bind-value="model.Description" Lines="3" />
                        <MudTextField T="string" Label="Storage" @bind-value="model.Storage" Lines="3" />
                        <MudTextField T="string" Label="Nutrition" @bind-value="model.Nutrition" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" lg="4">
                        <MudTimePicker Label="Prep Time" @bind-Time="model.PrepTime" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" lg="4">
                        <MudTimePicker Label="Cook Time" @bind-Time="model.CookTime" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="4" lg="4">
                        <MudTimePicker Label="Total Time" @bind-Time="model.TotalTime" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12" class="ma-auto">
                        <label class="mud-input-label">Ingredients</label>
                        <div id="ingredientsToolbar">
                            <span class="ql-formats">
                                <select class="ql-font">
                                    <option selected=""></option>
                                    <option value="serif"></option>
                                    <option value="monospace"></option>
                                </select>
                                <select class="ql-size">
                                    <option value="small"></option>
                                    <option selected=""></option>
                                    <option value="large"></option>
                                    <option value="huge"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                    <option value="justify"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </div>
                        <div @ref="@divIngredientsEditorElement" />

                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12" class="ma-auto">
                        <label class="mud-input-label">Directions</label>
                        <div id="directionsToolbar">
                            <span class="ql-formats">
                                <select class="ql-font">
                                    <option selected=""></option>
                                    <option value="serif"></option>
                                    <option value="monospace"></option>
                                </select>
                                <select class="ql-size">
                                    <option value="small"></option>
                                    <option selected=""></option>
                                    <option value="large"></option>
                                    <option value="huge"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                    <option value="justify"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </div>
                        <div @ref="@divDirectionsEditorElement" />
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12" lg="12" class="ma-auto">
                        <MudButton Disabled="@(loading || !isValid)" OnClick="HandleSubmit" Class="ml-auto" Variant="Variant.Filled" Color="Color.Primary">
                            @if (loading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Working...</MudText>
                            }
                            else
                            {
                                <MudText>Add</MudText>
                            }
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool isValid;
    private MudForm form;
    private CreateRecipeRequest model = new CreateRecipeRequest();
    private string error;
    private bool showError;
    private bool loading;
    private string strSavedContent = "";
    private ElementReference divIngredientsEditorElement;
    private ElementReference divDirectionsEditorElement;
    private string EditorContent;
    private string EditorHTMLContent;
    private bool EditorEnabled = true;
    List<string> tags = new List<string>();
    List<CategoryModel> categories = new List<CategoryModel>();
    private MudTextField<string> tagReference;

    public void AddTag()
    {
        model.Tags.Add(new TagModel(tagReference.Text));
        tagReference.Clear();
        StateHasChanged();
    }
    public void RemoveTag(MudChip chip)
    {
        model.Tags.RemoveAll(x => x.Name == chip.Text);
    }
    public void OnTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddTag();
        }
    }
    private async void HandleSubmit()
    {
        loading = true;
        try
        {
            //strSavedContent = await JSRuntime.InvokeAsync<string>(
            //"QuillFunctions.getQuillContent", divIngredientsEditorElement);
            //strSavedContent = await JSRuntime.InvokeAsync<string>(
            //"QuillFunctions.getQuillContent", divDirectionsEditorElement);
            showError = false;
            var result = await RecipeService.Create(model);
            if (result == null)
            {
                Snackbar.Add("An error occured!", Severity.Error, config => { config.ShowCloseIcon = true; });
            }
            else
            {
                Snackbar.Add("Successfully added recipe!", Severity.Success, config => { config.ShowCloseIcon = true; });
                NavigationManager.NavigateTo("/recipes");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            showError = true;
            loading = false;
            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divIngredientsEditorElement, "#ingredientsToolbar", "Ingredients");
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divDirectionsEditorElement, "#directionsToolbar", "Directions");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        categories = await RecipeService.GetCategories();
        model.Category = categories[0];
        loading = false;
    }
}