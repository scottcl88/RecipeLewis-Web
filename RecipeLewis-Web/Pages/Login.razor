@page "/login"
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions

@inherits LayoutComponentBase
<MudGrid Justify="Justify.Center">
    <MudItem lg="6" >
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <div class="alert alert-info">
                    Username: user@example.com<br />
                    Password: string
                </div>
                <MudTextField T="string" Label="Username" @bind-value="model.Email" Immediate="true" Required="true" RequiredError="User name is required!" />
                <MudTextField T="string" Label="Password" @bind-value="model.Password" 
                              InputType="InputType.Password" Required="true" Immediate="true"
                              RequiredError="Password is required!" />
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Disabled="@(loading || !isValid)" OnClick="HandleSubmit" Class="ml-auto" Variant="Variant.Filled" Color="Color.Primary">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Working...</MudText>
                        }
                        else
                        {
                            <MudText>Login</MudText>
                        }
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <div hidden="@(!showError)">
            <MudAlert Severity="Severity.Error">An error occurred.</MudAlert>
        </div>
    </MudItem>
</MudGrid>

@code {
    private bool isValid;
    private MudForm form;
    private Model model = new Model();
    private bool loading;
    private string error;
    private bool showError;

    protected override async void OnInitialized()
    {
        var user = await LocalStorageService.GetItem<UserModel>("user");
        // redirect to home if already logged in
        if (user != null && AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }
    private async void HandleSubmit()
    {
        loading = true;
        try
        {
            showError = false;
            await AuthenticationService.Login(model.Email, model.Password);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            showError = true;
            loading = false;
            StateHasChanged();
        }
    }

    private class Model
    {
        [Required]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }
}