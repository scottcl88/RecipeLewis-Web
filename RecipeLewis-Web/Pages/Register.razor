@page "/register"
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject IUserService UserService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@inherits LayoutComponentBase

<PageTitle>Register</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem lg="6">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudTextField T="string" Label="Name" @bind-Value="@model.Name" Immediate="true" Required="true" RequiredError="Name is required!" />
                <MudTextField T="string" Label="Email" @bind-Value="@model.Email" Immediate="true" Required="true" RequiredError="Email is required!" />
                <MudTextField T="string" Label="Password" @bind-Value="@model.Password"
                              InputType="@PasswordInput" Required="true" Immediate="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPasswordClick"
                              RequiredError="Password is required!" Validation="@(new Func<string, IEnumerable<string>>(x => PasswordStrength(x, false)))" />
                <MudTextField T="string" Label="Confirm Password" @bind-Value="@model.ConfirmPassword"
                              InputType="@PasswordInput" Required="true" Immediate="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPasswordClick"
                              RequiredError="Password is required!" Validation="@(new Func<string, IEnumerable<string>>(x => PasswordStrength(x, true)))" />
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Href="/login" Class="mr-auto" Variant="Variant.Text" Color="Color.Default">
                        <MudText>Login</MudText>
                    </MudButton>
                    <MudButton Disabled="@(loading || !isValid)" OnClick="HandleSubmit" Class="ml-auto" Variant="Variant.Filled" Color="Color.Primary">
                        @if (loading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Working...</MudText>
                        }
                        else
                        {
                            <MudText>Register</MudText>
                        }
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <div hidden="@(!showMessage)">
            <MudAlert Severity="@severity">@message</MudAlert>
        </div>
    </MudItem>
</MudGrid>

@code {
    private bool isValid;
    private MudForm? form;
    private RegisterRequest model = new RegisterRequest();
    private bool loading;
    private string message;
    private bool showMessage;
    private Severity severity;
    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ShowPasswordClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw, bool secondPass)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (secondPass && pw != model.Password)
        {            
            yield return "Passwords must match!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least 8 characters";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    protected override async void OnInitialized()
    {
        var user = await LocalStorageService.GetItem<UserModel>("user");
        // redirect to home if already logged in
        if (user != null && AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }
    private async void HandleSubmit()
    {
        loading = true;
        try
        {
            showMessage = false;
            var result = await UserService.Register(model);
            message = result.Message;
            severity = result.Success ? Severity.Success : Severity.Error;
            showMessage = true;
            loading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = "An error occurred.";
            severity = Severity.Error;
            showMessage = true;
            loading = false;
            StateHasChanged();
        }
    }
}