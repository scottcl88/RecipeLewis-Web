@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject IAuthenticationService AuthenticationService
@inject IUserService UserService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inherits LayoutComponentBase

<PageTitle>Reset Password</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem lg="6">
        <MudPaper Class="pa-4">
            @if (loading)
            {
                <MudProgressCircular Class="ms-n1 mr-auto" Size="Size.Small" Indeterminate="true" />
                <MudText Class="">Working...</MudText>
            }
            else
            {
                @if (showInvalidToken)
                {
                    <h2>Invalid Token</h2>
                    <p>Sorry, we cannot reset your password. Please <MudLink Href="/forgot-password" Color="Color.Primary">try again.</MudLink></p>
                }
                else
                {
                    <h2 class="text-center">Reset Password</h2>
                    <MudForm @ref="form" @bind-IsValid="@isValid">
                        <MudTextField T="string" Label="Password" @bind-Value="@request.Password"
                              InputType="@PasswordInput" Required="true" Immediate="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPasswordClick"
                              RequiredError="Password is required!" Validation="@(new Func<string, IEnumerable<string>>(x => PasswordStrength(x, false)))" />
                        <MudTextField T="string" Label="Confirm Password" @bind-Value="@request.ConfirmPassword"
                              InputType="@PasswordInput" Required="true" Immediate="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPasswordClick"
                              RequiredError="Password is required!" Validation="@(new Func<string, IEnumerable<string>>(x => PasswordStrength(x, true)))" />
                        <MudButton Disabled="@(loading || !isValid)" OnClick="HandleSubmit" Class="ml-auto mt-3" Variant="Variant.Filled" Color="Color.Primary">
                            @if (loading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Working...</MudText>
                            }
                            else
                            {
                                <MudText>Change Password</MudText>
                            }
                        </MudButton>
                    </MudForm>
                }
            }
        </MudPaper>
        <div hidden="@(!showMessage)">
            <MudAlert Severity="@severity">@message</MudAlert>
        </div>
    </MudItem>
</MudGrid>

@code {
    private bool isValid;
    private MudForm? form;
    private ResetPasswordRequest request = new ResetPasswordRequest();
    private bool loading;
    private string message;
    private bool showInvalidToken;
    private bool showMessage;
    private Severity severity;
    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ShowPasswordClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw, bool secondPass)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (secondPass && pw != request.Password)
        {
            yield return "Passwords must match!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least 8 characters";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private async void HandleSubmit()
    {
        loading = true;
        try
        {
            showMessage = false;
            var result = await UserService.ResetPassword(request);
            if (result.Success)
            {
                Snackbar.Add(result.Message, Severity.Success, config => { config.ShowCloseIcon = true; });
                NavigationManager.NavigateTo("/login");
            }
            message = result.Message;
            severity = result.Success ? Severity.Success : Severity.Error;
            showMessage = true;
            loading = false;
        }
        catch (Exception ex)
        {
            message = "An error occurred.";
            severity = Severity.Error;
            showMessage = true;
            loading = false;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            showMessage = false;
            string token = NavigationManager.QueryString("token");
            request.Token = token;
            var validateRequest = new ValidateResetTokenRequest()
                {
                    Token = token
                };
            var result = await UserService.ValidateResetToken(validateRequest);
            showInvalidToken = !result.Success;
            message = result.Message;
            severity = result.Success ? Severity.Success : Severity.Error;
            showMessage = !result.Success;
            loading = false;
        }
        catch (Exception ex)
        {
            message = "An error occurred.";
            severity = Severity.Error;
            showMessage = true;
            showInvalidToken = true;
            loading = false;
        }
        StateHasChanged();
    }
}