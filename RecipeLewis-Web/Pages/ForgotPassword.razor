@page "/forgot-password"
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject IUserService UserService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@inherits LayoutComponentBase

<PageTitle>Forgot Password</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem lg="6">
        <MudPaper Class="pa-4">
            <h2 class="text-center">Forgot Password?</h2>
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudTextField T="string" Label="Email" @bind-Value="@request.Email" Required="true" RequiredError="Email is required!" Immediate="true" />
                <MudButton OnClick="HandleSubmit" Class="ml-auto mt-3" Variant="Variant.Filled" Color="Color.Primary">
                    <MudText>Reset Password</MudText>
                </MudButton>
            </MudForm>
        </MudPaper>
        <div hidden="@(!showMessage)">
            <MudAlert Severity="@severity">@message</MudAlert>
        </div>
    </MudItem>
</MudGrid>

@code {
    private bool isValid;
    private MudForm form;
    private UserModel model = new UserModel();
    private ForgotPasswordRequest request = new ForgotPasswordRequest();
    private bool loading;
    private string message;
    private bool showMessage;
    private Severity severity;

    private async void HandleSubmit()
    {
        loading = true;
        try
        {
            showMessage = false;
            var result = await UserService.ForgotPassword(request);
            if (result.Success)
            {                
                await AuthenticationService.ResetLocalUser();
            }
            message = result.Message;
            severity = result.Success ? Severity.Success : Severity.Error;
            showMessage = true;
            loading = false;
        }
        catch (Exception ex)
        {
            message = "An error occurred.";
            severity = Severity.Error;
            showMessage = true;
            loading = false;
        }
        StateHasChanged();
    }
}